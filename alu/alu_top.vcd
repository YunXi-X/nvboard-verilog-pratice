$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  4 ` a [3:0] $end
  $var wire  4 a b [3:0] $end
  $var wire  3 b i_mod [2:0] $end
  $var wire  1 d o_cout $end
  $var wire  1 c o_overflow $end
  $var wire  4 f o_res [3:0] $end
  $var wire  8 e o_seg [7:0] $end
  $scope module alu $end
   $var wire  4 ` a [3:0] $end
   $var wire  4 / a_1 [3:0] $end
   $var wire  4 a b [3:0] $end
   $var wire  4 0 b_1 [3:0] $end
   $var wire  4 g b_sub [3:0] $end
   $var wire  4 1 b_sub_1 [3:0] $end
   $var wire  3 b i_mod [2:0] $end
   $var wire  4 9 o_and [3:0] $end
   $var wire  1 d o_cout $end
   $var wire  1 4 o_cout_1 $end
   $var wire  1 5 o_cout_2 $end
   $var wire  4 < o_equ [3:0] $end
   $var wire  4 8 o_max [3:0] $end
   $var wire  4 h o_not [3:0] $end
   $var wire  4 : o_or [3:0] $end
   $var wire  1 c o_overflow $end
   $var wire  1 2 o_overflow_1 $end
   $var wire  1 3 o_overflow_2 $end
   $var wire  4 f o_res [3:0] $end
   $var wire  4 6 o_res_1 [3:0] $end
   $var wire  4 7 o_res_2 [3:0] $end
   $var wire  8 e o_seg [7:0] $end
   $var wire  4 ; o_xor [3:0] $end
   $scope module Mux_i0 $end
    $var wire 32 n DATA_LEN [31:0] $end
    $var wire 32 m KEY_LEN [31:0] $end
    $var wire 32 l NR_KEY [31:0] $end
    $var wire  3 b key [2:0] $end
    $var wire 56 i lut [55:0] $end
    $var wire  4 f out [3:0] $end
    $scope module i0 $end
     $var wire 32 n DATA_LEN [31:0] $end
     $var wire 32 o HAS_DEFAULT [31:0] $end
     $var wire 32 m KEY_LEN [31:0] $end
     $var wire 32 l NR_KEY [31:0] $end
     $var wire 32 q PAIR_LEN [31:0] $end
     $var wire  4 E data_list[0] [3:0] $end
     $var wire  4 F data_list[1] [3:0] $end
     $var wire  4 G data_list[2] [3:0] $end
     $var wire  4 H data_list[3] [3:0] $end
     $var wire  4 I data_list[4] [3:0] $end
     $var wire  4 J data_list[5] [3:0] $end
     $var wire  4 K data_list[6] [3:0] $end
     $var wire  4 L data_list[7] [3:0] $end
     $var wire  4 p default_out [3:0] $end
     $var wire  1 N hit $end
     $var wire 32 r i [31:0] $end
     $var wire  3 b key [2:0] $end
     $var wire  3 # key_list[0] [2:0] $end
     $var wire  3 $ key_list[1] [2:0] $end
     $var wire  3 % key_list[2] [2:0] $end
     $var wire  3 & key_list[3] [2:0] $end
     $var wire  3 ' key_list[4] [2:0] $end
     $var wire  3 ( key_list[5] [2:0] $end
     $var wire  3 ) key_list[6] [2:0] $end
     $var wire  3 * key_list[7] [2:0] $end
     $var wire 56 i lut [55:0] $end
     $var wire  4 M lut_out [3:0] $end
     $var wire  4 f out [3:0] $end
     $var wire  7 = pair_list[0] [6:0] $end
     $var wire  7 > pair_list[1] [6:0] $end
     $var wire  7 ? pair_list[2] [6:0] $end
     $var wire  7 @ pair_list[3] [6:0] $end
     $var wire  7 A pair_list[4] [6:0] $end
     $var wire  7 B pair_list[5] [6:0] $end
     $var wire  7 C pair_list[6] [6:0] $end
     $var wire  7 D pair_list[7] [6:0] $end
    $upscope $end
   $upscope $end
   $scope module Mux_i1 $end
    $var wire 32 t DATA_LEN [31:0] $end
    $var wire 32 m KEY_LEN [31:0] $end
    $var wire 32 s NR_KEY [31:0] $end
    $var wire  3 b key [2:0] $end
    $var wire  8 O lut [7:0] $end
    $var wire  1 d out [0:0] $end
    $scope module i0 $end
     $var wire 32 t DATA_LEN [31:0] $end
     $var wire 32 o HAS_DEFAULT [31:0] $end
     $var wire 32 m KEY_LEN [31:0] $end
     $var wire 32 s NR_KEY [31:0] $end
     $var wire 32 n PAIR_LEN [31:0] $end
     $var wire  1 R data_list[0] [0:0] $end
     $var wire  1 S data_list[1] [0:0] $end
     $var wire  1 u default_out [0:0] $end
     $var wire  1 U hit $end
     $var wire 32 v i [31:0] $end
     $var wire  3 b key [2:0] $end
     $var wire  3 + key_list[0] [2:0] $end
     $var wire  3 , key_list[1] [2:0] $end
     $var wire  8 O lut [7:0] $end
     $var wire  1 T lut_out [0:0] $end
     $var wire  1 d out [0:0] $end
     $var wire  4 P pair_list[0] [3:0] $end
     $var wire  4 Q pair_list[1] [3:0] $end
    $upscope $end
   $upscope $end
   $scope module Mux_i2 $end
    $var wire 32 t DATA_LEN [31:0] $end
    $var wire 32 m KEY_LEN [31:0] $end
    $var wire 32 s NR_KEY [31:0] $end
    $var wire  3 b key [2:0] $end
    $var wire  8 V lut [7:0] $end
    $var wire  1 c out [0:0] $end
    $scope module i0 $end
     $var wire 32 t DATA_LEN [31:0] $end
     $var wire 32 o HAS_DEFAULT [31:0] $end
     $var wire 32 m KEY_LEN [31:0] $end
     $var wire 32 s NR_KEY [31:0] $end
     $var wire 32 n PAIR_LEN [31:0] $end
     $var wire  1 Y data_list[0] [0:0] $end
     $var wire  1 Z data_list[1] [0:0] $end
     $var wire  1 u default_out [0:0] $end
     $var wire  1 \ hit $end
     $var wire 32 v i [31:0] $end
     $var wire  3 b key [2:0] $end
     $var wire  3 - key_list[0] [2:0] $end
     $var wire  3 . key_list[1] [2:0] $end
     $var wire  8 V lut [7:0] $end
     $var wire  1 [ lut_out [0:0] $end
     $var wire  1 c out [0:0] $end
     $var wire  4 W pair_list[0] [3:0] $end
     $var wire  4 X pair_list[1] [3:0] $end
    $upscope $end
   $upscope $end
   $scope module addr_4_i1 $end
    $var wire  4 / a [3:0] $end
    $var wire  4 0 b [3:0] $end
    $var wire  1 4 cout $end
    $var wire  1 2 overflow $end
    $var wire  4 6 sum [3:0] $end
    $var wire  4 ] temp [3:0] $end
   $upscope $end
   $scope module addr_4_i2 $end
    $var wire  4 / a [3:0] $end
    $var wire  4 1 b [3:0] $end
    $var wire  1 5 cout $end
    $var wire  1 3 overflow $end
    $var wire  4 7 sum [3:0] $end
    $var wire  4 ^ temp [3:0] $end
   $upscope $end
   $scope module and_i0 $end
    $var wire  4 ` a [3:0] $end
    $var wire  4 a b [3:0] $end
    $var wire  4 9 out [3:0] $end
   $upscope $end
   $scope module eq_i0 $end
    $var wire  4 ` a [3:0] $end
    $var wire  4 a b [3:0] $end
    $var wire  4 < out [3:0] $end
   $upscope $end
   $scope module max_i0 $end
    $var wire  4 ` a [3:0] $end
    $var wire  4 a b [3:0] $end
    $var wire  4 8 out [3:0] $end
   $upscope $end
   $scope module or_i0 $end
    $var wire  4 ` a [3:0] $end
    $var wire  4 a b [3:0] $end
    $var wire  4 : out [3:0] $end
   $upscope $end
   $scope module seg_i0 $end
    $var wire  1 k i_minus $end
    $var wire  3 _ i_seg [2:0] $end
    $var wire  8 w num0 [7:0] $end
    $var wire  8 x num1 [7:0] $end
    $var wire  8 y num2 [7:0] $end
    $var wire  8 z num3 [7:0] $end
    $var wire  8 { num4 [7:0] $end
    $var wire  8 | num5 [7:0] $end
    $var wire  8 } num6 [7:0] $end
    $var wire  8 ~ num7 [7:0] $end
    $var wire  8 !! num8 [7:0] $end
    $var wire  8 e o_seg [7:0] $end
   $upscope $end
   $scope module xor_i0 $end
    $var wire  4 ` a [3:0] $end
    $var wire  4 a b [3:0] $end
    $var wire  4 ; out [3:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b111 #
b110 $
b101 %
b100 &
b011 '
b010 (
b001 )
b000 *
b001 +
b000 ,
b001 -
b000 .
b1101 /
b1101 0
b0011 1
02
03
14
15
b1101 6
b0000 7
b1011 8
b1011 9
b1011 :
b0000 ;
b0001 <
b1110001 =
b1101011 >
b1010000 ?
b1001011 @
b0111011 A
b0100100 B
b0010000 C
b0001101 D
b0001 E
b1011 F
b0000 G
b1011 H
b1011 I
b0100 J
b0000 K
b1101 L
b0000 M
1N
b00010011 O
b0011 P
b0001 Q
1R
1S
1T
1U
b00000010 V
b0010 W
b0000 X
0Y
0Z
0[
1\
b1010 ]
b0000 ^
b000 _
b1011 `
b1011 a
b001 b
0c
1d
b00000010 e
b0000 f
b0011 g
b0100 h
b00011010010000010010001110111001011101000011010111110001 i
0k
b00000000000000000000000000001000 l
b00000000000000000000000000000011 m
b00000000000000000000000000000100 n
b00000000000000000000000000000000 o
b0000 p
b00000000000000000000000000000111 q
b00000000000000000000000000001000 r
b00000000000000000000000000000010 s
b00000000000000000000000000000001 t
0u
b00000000000000000000000000000010 v
b11111101 w
b01100000 x
b11011010 y
b11110010 z
b01100110 {
b10110110 |
b10111110 }
b11100000 ~
b11111111 !!
#2
